# -*- coding: utf-8 -*-
"""ANN Churn Streamlil Interface.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UhgXOEFS9tCemXqrLsHfL3M4ZXNKG52k
"""

!pip install streamlit pyngrok

import streamlit as st
import numpy as np
import pandas as pd
import pickle
from sklearn.preprocessing import StandardScaler, LabelEncoder, OneHotEncoder
import tensorflow as tf

# Loading trained model
model = tf.keras.models.load_model('/content/model.keras')

with open('/content/scaler.pkl', 'rb') as file:                           # rw used for reading
  scaler = pickle.load(file)

with open('/content/le.pkl', 'rb') as file:
  le = pickle.load(file)

with open('/content/ohe.pkl', 'rb') as file:
  ohe = pickle.load(file)

st.title("Customer Churn Prediction")

# User inputs
geography = st.selectbox('Geography', ohe.categories_[0])
gender = st.selectbox('Gender', le.classes_)
age = st.slider('Age', 18, 92)
balance = st.number_input('Balance')
credit_score = st.number_input('CreditScore')
estimated_salary = st.number_input('EstimatedSalary')
teniure = st.slider('Tenure', 0, 10)
no_of_products = st.slider('NumOfProducts', 1, 4)
has_cr_card = st.selectbox('HasCrCard', [0, 1])
is_active_member = st.selectbox('IsActiveMember', [0, 1])

# Prepare input data
input_data = pd.DataFrame({
        'Geography': [geography],
        'CreditScore' : [credit_score],
        'Gender' : [le.transform([gender])[0]],
        'Age' : [age],
        'Tenure' : [teniure],
        'Balance' : [6000],
        'NumOfProducts' : [no_of_products],
        'HasCrCard' : [has_cr_card],
        'IsActiveMember' : [is_active_member],
        'EstimatedSalary' : [50000],
})

geo_input_data = ohe.transform(input_data[['Geography']]).toarray()
geo_input_data = pd.DataFrame(geo_input_data, columns = ohe.get_feature_names_out(['Geography']))

# concatinating both the dataframes
input_data = pd.concat([input_data.reset_index(drop=True), geo_input_data], axis=1)
input_data.drop(columns=['Geography'], inplace=True)

# Scaling the user input data
input_scaled = scaler.transform(input_data)

# Prediction for churn
prediction = model.predict(input_scaled)

if prediction > 0.5:
  print(f"The customer is likely to churn")

else:
  print(f"The customer is not likely to churn")

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py

from pyngrok import ngrok
!streamlit run /content/app.py
public_url = ngrok.connect(port='8501')
print(f"Streamlit app is live at {public_url}")